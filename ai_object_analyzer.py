#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç AI Í∞ùÏ≤¥ ÏÉÅÏÑ∏ Î∂ÑÏÑùÍ∏∞
YOLO Í∏∞Î≥∏ Í∞êÏßÄ Í≤∞Í≥ºÎ•º AI APIÎ°ú ÏÉÅÏÑ∏ Î∂ÑÏÑùÌïòÏó¨ Íµ¨Ï≤¥Ï†ÅÏù∏ Î™®Îç∏Î™Ö/Î∏åÎûúÎìú Ï†ïÎ≥¥ Ï†úÍ≥µ
"""

import cv2
import numpy as np
import base64
import requests
import json
import time
import os
from typing import Dict, List, Tuple, Optional
import threading
from queue import Queue
import logging

class AIObjectAnalyzer:
    """AI APIÎ•º ÌôúÏö©Ìïú Í∞ùÏ≤¥ ÏÉÅÏÑ∏ Î∂ÑÏÑù ÌÅ¥ÎûòÏä§"""
    
    def __init__(self):
        self.api_providers = {
            'openai': {
                'enabled': False,
                'api_key': os.getenv('OPENAI_API_KEY'),
                'endpoint': 'https://api.openai.com/v1/chat/completions',
                'model': 'gpt-4-vision-preview'
            },
            'anthropic': {
                'enabled': False,
                'api_key': os.getenv('ANTHROPIC_API_KEY'),
                'endpoint': 'https://api.anthropic.com/v1/messages',
                'model': 'claude-3-sonnet-20240229'
            },
            'google': {
                'enabled': False,
                'api_key': os.getenv('GOOGLE_API_KEY'),
                'endpoint': 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent',
                'model': 'gemini-2.0-flash'
            },
            'github_copilot': {
                'enabled': False,
                'api_key': None,  # GitHub CopilotÏùÄ Î≥ÑÎèÑ API ÌÇ§ Î∂àÌïÑÏöî
                'endpoint': 'local_vscode_integration',
                'model': 'github-copilot'
            }
        }
        
        # GitHub Copilot ÌÜµÌï© Ï¥àÍ∏∞Ìôî
        try:
            from github_copilot_integration import GitHubCopilotIntegration
            self.copilot_integration = GitHubCopilotIntegration()
            if self.copilot_integration.is_available():
                self.api_providers['github_copilot']['enabled'] = True
                print("‚úÖ GitHub Copilot ÌÜµÌï© ÌôúÏÑ±Ìôî")
            else:
                print("‚ö†Ô∏è GitHub Copilot ÏÇ¨Ïö© Î∂àÍ∞Ä (VS Code ÎòêÎäî GitHub CLI ÌïÑÏöî)")
        except ImportError:
            self.copilot_integration = None
            print("‚ö†Ô∏è GitHub Copilot ÌÜµÌï© Î™®ÎìàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§")
        
        # API ÏÑ§Ï†ï ÌôïÏù∏
        self.check_api_availability()
        
        # Î∂ÑÏÑù Ï∫êÏãú (Í∞ôÏùÄ Í∞ùÏ≤¥ Î∞òÎ≥µ Î∂ÑÏÑù Î∞©ÏßÄ)
        self.analysis_cache = {}
        self.cache_expire_time = 300  # 5Î∂Ñ
        
        # ÎπÑÎèôÍ∏∞ Î∂ÑÏÑùÏùÑ ÏúÑÌïú ÌÅê
        self.analysis_queue = Queue()
        self.result_cache = {}
        
        # Î∂ÑÏÑù ÏÑ§Ï†ï
        self.analysis_settings = {
            'detail_level': 'high',  # low, medium, high
            'focus_areas': [
                'brand', 'model', 'type', 'color', 'condition', 'distinctive_features'
            ],
            'confidence_threshold': 0.7,
            'max_analysis_time': 10  # Ï¥à
        }
        
        # Í∞ùÏ≤¥Î≥Ñ Î∂ÑÏÑù Ïö∞ÏÑ†ÏàúÏúÑ
        self.analysis_priority = {
            'cell phone': 10,
            'laptop': 9,
            'car': 8,
            'truck': 7,
            'person': 6,
            'tv': 5,
            'book': 4,
            'bottle': 3,
            'chair': 2,
            'cup': 1
        }
        
        print("ü§ñ AI Í∞ùÏ≤¥ Î∂ÑÏÑùÍ∏∞ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
        
    def check_api_availability(self):
        """API ÏÇ¨Ïö© Í∞ÄÎä•ÏÑ± ÌôïÏù∏"""
        available_apis = []
        
        for provider, config in self.api_providers.items():
            if config['api_key']:
                config['enabled'] = True
                available_apis.append(provider)
                print(f"‚úÖ {provider.upper()} API ÏÇ¨Ïö© Í∞ÄÎä•")
            else:
                print(f"‚ö†Ô∏è {provider.upper()} API ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏùå")
        
        if not available_apis:
            print("‚ö†Ô∏è ÏÇ¨Ïö© Í∞ÄÎä•Ìïú AI APIÍ∞Ä ÏóÜÏäµÎãàÎã§. ÌôòÍ≤ΩÎ≥ÄÏàòÎ•º ÏÑ§Ï†ïÌïòÏÑ∏Ïöî:")
            print("   OPENAI_API_KEY=your_openai_key")
            print("   ANTHROPIC_API_KEY=your_anthropic_key") 
            print("   GOOGLE_API_KEY=your_google_key")
        
        return available_apis
    
    def encode_image_to_base64(self, image_crop: np.ndarray) -> str:
        """Ïù¥ÎØ∏ÏßÄÎ•º base64Î°ú Ïù∏ÏΩîÎî©"""
        try:
            # Ïù¥ÎØ∏ÏßÄ ÌíàÏßà ÏµúÏ†ÅÌôî
            if image_crop.shape[1] > 512:
                height, width = image_crop.shape[:2]
                scale = 512 / width
                new_width, new_height = int(width * scale), int(height * scale)
                image_crop = cv2.resize(image_crop, (new_width, new_height))
            
            # JPEG Ïù∏ÏΩîÎî© (ÏïïÏ∂ïÎ•† ÎÜíÏùå)
            _, buffer = cv2.imencode('.jpg', image_crop, [cv2.IMWRITE_JPEG_QUALITY, 85])
            image_base64 = base64.b64encode(buffer).decode('utf-8')
            return image_base64
        except Exception as e:
            print(f"‚ùå Ïù¥ÎØ∏ÏßÄ Ïù∏ÏΩîÎî© Ïã§Ìå®: {e}")
            return None
    
    def create_analysis_prompt(self, object_class: str, detail_level: str = 'high') -> str:
        """Î∂ÑÏÑù ÌîÑÎ°¨ÌîÑÌä∏ ÏÉùÏÑ±"""
        base_prompt = f"""Ïù¥ Ïù¥ÎØ∏ÏßÄÏóê Î≥¥Ïù¥Îäî {object_class}Ïóê ÎåÄÌï¥ ÏÉÅÏÑ∏Ìûà Î∂ÑÏÑùÌï¥Ï£ºÏÑ∏Ïöî.
        
Îã§Ïùå Ï†ïÎ≥¥Î•º JSON ÌòïÌÉúÎ°ú Ï†úÍ≥µÌï¥Ï£ºÏÑ∏Ïöî:
{{
    "brand": "Î∏åÎûúÎìúÎ™Ö (Ïïå Ïàò ÏûàÎäî Í≤ΩÏö∞)",
    "model": "Î™®Îç∏Î™Ö (Ïïå Ïàò ÏûàÎäî Í≤ΩÏö∞)", 
    "type": "Íµ¨Ï≤¥Ï†ÅÏù∏ ÌÉÄÏûÖ/Î∂ÑÎ•ò",
    "color": "Ï£ºÏöî ÏÉâÏÉÅ",
    "distinctive_features": ["ÌäπÏßï1", "ÌäπÏßï2", "ÌäπÏßï3"],
    "estimated_value": "Ï∂îÏ†ï Í∞ÄÍ≤©ÎåÄ (Ïïå Ïàò ÏûàÎäî Í≤ΩÏö∞)",
    "condition": "ÏÉÅÌÉú (ÏÉàÍ≤É/ÏÇ¨Ïö©Îê®/ÎÇ°Ïùå Îì±)",
    "confidence": 0.0-1.0 ÏÇ¨Ïù¥Ïùò Ïã†Î¢∞ÎèÑ
}}

Î∂ÑÏÑù Í∏∞Ï§Ä:
- Î∏åÎûúÎìú Î°úÍ≥†ÎÇò ÎîîÏûêÏù∏ ÌäπÏßïÏùÑ Ï£ºÏùòÍπäÍ≤å Í¥ÄÏ∞∞
- Î™®Îç∏ Í≥†Ïú†Ïùò ÌäπÏßïÏ†Å ÎîîÏûêÏù∏ ÏöîÏÜå ÏãùÎ≥Ñ
- ÏÉâÏÉÅ, ÌÅ¨Í∏∞, ÌòïÌÉú Îì± ÏãúÍ∞ÅÏ†Å ÌäπÏßï Î∂ÑÏÑù
- Í∞ÄÎä•Ìïú Ìïú Íµ¨Ï≤¥Ï†ÅÏúºÎ°ú ÏãùÎ≥Ñ

ÏùëÎãµÏùÄ Î∞òÎìúÏãú JSON ÌòïÌÉúÎ°úÎßå Ï†úÍ≥µÌïòÍ≥†, Îã§Î•∏ ÏÑ§Î™ÖÏùÄ Ìè¨Ìï®ÌïòÏßÄ ÎßàÏÑ∏Ïöî."""

        if detail_level == 'high':
            if object_class == 'cell phone':
                base_prompt += """

ÌäπÎ≥ÑÌûà Ïä§ÎßàÌä∏Ìè∞Ïùò Í≤ΩÏö∞:
- Ïπ¥Î©îÎùº Î∞∞ÏπòÏôÄ Í∞úÏàò ÌôïÏù∏
- ÌôàÎ≤ÑÌäº Ïú†Î¨¥ ÌôïÏù∏  
- Î∏åÎûúÎìúÎ≥Ñ ÌäπÏßïÏ†Å ÎîîÏûêÏù∏ (iPhoneÏùò ÌôàÎ≤ÑÌäº/ÎÖ∏Ïπò, SamsungÏùò Í≥°Î©¥ Îì±)
- ÌÅ¨Í∏∞ÏôÄ ÎπÑÏú® Î∂ÑÏÑù"""

            elif object_class == 'car':
                base_prompt += """

ÌäπÎ≥ÑÌûà ÏûêÎèôÏ∞®Ïùò Í≤ΩÏö∞:
- Í∑∏Î¶¥ ÎîîÏûêÏù∏Í≥º Î°úÍ≥† ÌôïÏù∏
- Ìó§ÎìúÎùºÏù¥Ìä∏ ÌòïÌÉú Î∂ÑÏÑù
- Ï∞®Ï≤¥ ÎùºÏù∏Í≥º ÎπÑÏú® ÌôïÏù∏
- Ìú† ÎîîÏûêÏù∏ Í¥ÄÏ∞∞"""

            elif object_class == 'laptop':
                base_prompt += """

ÌäπÎ≥ÑÌûà ÎÖ∏Ìä∏Î∂ÅÏùò Í≤ΩÏö∞:
- Î∏åÎûúÎìú Î°úÍ≥† ÏúÑÏπòÏôÄ ÌòïÌÉú
- ÌôîÎ©¥ Î≤†Ï†§ ÎëêÍªò
- ÌÇ§Î≥¥Îìú Î†àÏù¥ÏïÑÏõÉ
- Ï†ÑÏ≤¥Ï†ÅÏù∏ ÎîîÏûêÏù∏ Ïñ∏Ïñ¥"""

        return base_prompt
    
    def analyze_with_openai(self, image_base64: str, object_class: str) -> Optional[Dict]:
        """OpenAI GPT-4 VisionÏúºÎ°ú Î∂ÑÏÑù"""
        if not self.api_providers['openai']['enabled']:
            return None
            
        try:
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f"Bearer {self.api_providers['openai']['api_key']}"
            }
            
            prompt = self.create_analysis_prompt(object_class)
            
            payload = {
                "model": "gpt-4-vision-preview",
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{image_base64}"
                                }
                            }
                        ]
                    }
                ],
                "max_tokens": 500,
                "temperature": 0.1
            }
            
            response = requests.post(
                self.api_providers['openai']['endpoint'],
                headers=headers,
                json=payload,
                timeout=self.analysis_settings['max_analysis_time']
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result['choices'][0]['message']['content']
                try:
                    # JSON ÌååÏã±
                    analysis = json.loads(content)
                    analysis['provider'] = 'OpenAI GPT-4'
                    return analysis
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è OpenAI ÏùëÎãµ JSON ÌååÏã± Ïã§Ìå®: {content}")
                    return None
            else:
                print(f"‚ùå OpenAI API Ïò§Î•ò: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå OpenAI Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return None
    
    def analyze_with_anthropic(self, image_base64: str, object_class: str) -> Optional[Dict]:
        """Anthropic ClaudeÎ°ú Î∂ÑÏÑù"""
        if not self.api_providers['anthropic']['enabled']:
            return None
            
        try:
            headers = {
                'Content-Type': 'application/json',
                'x-api-key': self.api_providers['anthropic']['api_key'],
                'anthropic-version': '2023-06-01'
            }
            
            prompt = self.create_analysis_prompt(object_class)
            
            payload = {
                "model": "claude-3-sonnet-20240229",
                "max_tokens": 500,
                "temperature": 0.1,
                "messages": [
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": prompt},
                            {
                                "type": "image",
                                "source": {
                                    "type": "base64",
                                    "media_type": "image/jpeg",
                                    "data": image_base64
                                }
                            }
                        ]
                    }
                ]
            }
            
            response = requests.post(
                self.api_providers['anthropic']['endpoint'],
                headers=headers,
                json=payload,
                timeout=self.analysis_settings['max_analysis_time']
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result['content'][0]['text']
                try:
                    analysis = json.loads(content)
                    analysis['provider'] = 'Anthropic Claude'
                    return analysis
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è Claude ÏùëÎãµ JSON ÌååÏã± Ïã§Ìå®: {content}")
                    return None
            else:
                print(f"‚ùå Anthropic API Ïò§Î•ò: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Anthropic Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return None
    
    def analyze_with_google(self, image_base64: str, object_class: str) -> Optional[Dict]:
        """Google GeminiÎ°ú Î∂ÑÏÑù"""
        if not self.api_providers['google']['enabled']:
            return None
            
        try:
            headers = {
                'Content-Type': 'application/json'
            }
            
            prompt = self.create_analysis_prompt(object_class)
            
            payload = {
                "contents": [
                    {
                        "parts": [
                            {"text": prompt},
                            {
                                "inline_data": {
                                    "mime_type": "image/jpeg",
                                    "data": image_base64
                                }
                            }
                        ]
                    }
                ],
                "generationConfig": {
                    "temperature": 0.1,
                    "maxOutputTokens": 500
                }
            }
            
            url = f"{self.api_providers['google']['endpoint']}?key={self.api_providers['google']['api_key']}"
            
            response = requests.post(
                url,
                headers=headers,
                json=payload,
                timeout=self.analysis_settings['max_analysis_time']
            )
            
            if response.status_code == 200:
                result = response.json()
                content = result['candidates'][0]['content']['parts'][0]['text']
                try:
                    analysis = json.loads(content)
                    analysis['provider'] = 'Google Gemini'
                    return analysis
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è Gemini ÏùëÎãµ JSON ÌååÏã± Ïã§Ìå®: {content}")
                    return None
            else:
                print(f"‚ùå Google API Ïò§Î•ò: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Google Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return None
    
    def analyze_with_github_copilot(self, image_base64: str, object_class: str) -> Optional[Dict]:
        """GitHub CopilotÎ°ú Î∂ÑÏÑù"""
        if not self.api_providers['github_copilot']['enabled'] or not self.copilot_integration:
            return None
            
        try:
            # GitHub Copilot ÌÜµÌï©ÏùÑ ÌÜµÌïú Î∂ÑÏÑù
            object_info = {
                "class_name": object_class,
                "confidence": 0.8
            }
            
            # Ïù¥ÎØ∏ÏßÄ Îç∞Ïù¥ÌÑ∞ Î≥ÄÌôò (base64 -> bytes)
            image_data = base64.b64decode(image_base64) if image_base64 else b""
            
            # Copilot Î∂ÑÏÑù Ïã§Ìñâ
            result = self.copilot_integration.analyze_object(image_data, object_info)
            
            if result:
                # ÌëúÏ§Ä ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                analysis = {
                    "brand": result.get("brand", "Unknown"),
                    "model": result.get("model", "Unknown"),
                    "type": result.get("type", object_class),
                    "color": result.get("color", "Unknown"),
                    "distinctive_features": [
                        f"GitHub Copilot suggested {result.get('brand', 'Unknown')} brand",
                        f"Model: {result.get('model', 'Unknown')}",
                        f"Condition: {result.get('condition', 'Good')}"
                    ],
                    "estimated_value": "AI estimated",
                    "condition": result.get("condition", "Good"),
                    "confidence": result.get("confidence", 0.75),
                    "provider": "GitHub Copilot",
                    "source": result.get("source", "github_copilot")
                }
                
                print(f"‚úÖ GitHub Copilot Î∂ÑÏÑù ÏôÑÎ£å: {analysis['brand']} {analysis['model']}")
                return analysis
            else:
                print("‚ö†Ô∏è GitHub Copilot Î∂ÑÏÑù Í≤∞Í≥º ÏóÜÏùå")
                return None
                
        except Exception as e:
            print(f"‚ùå GitHub Copilot Î∂ÑÏÑù Ïã§Ìå®: {e}")
            return None
    
    def get_object_crop(self, frame: np.ndarray, box: List[float], 
                       padding: float = 0.1) -> np.ndarray:
        """Í∞ùÏ≤¥ ÏòÅÏó≠ ÌÅ¨Î°≠ (Ìå®Îî© Ìè¨Ìï®)"""
        try:
            x1, y1, x2, y2 = map(int, box)
            height, width = frame.shape[:2]
            
            # Ìå®Îî© Ï∂îÍ∞Ä
            pad_w = int((x2 - x1) * padding)
            pad_h = int((y2 - y1) * padding)
            
            # Í≤ΩÍ≥Ñ ÌôïÏù∏
            x1 = max(0, x1 - pad_w)
            y1 = max(0, y1 - pad_h)
            x2 = min(width, x2 + pad_w)
            y2 = min(height, y2 + pad_h)
            
            crop = frame[y1:y2, x1:x2]
            return crop
            
        except Exception as e:
            print(f"‚ùå Í∞ùÏ≤¥ ÌÅ¨Î°≠ Ïã§Ìå®: {e}")
            return None
    
    def analyze_object_detailed(self, frame: np.ndarray, box: List[float], 
                              object_class: str, confidence: float) -> Optional[Dict]:
        """Í∞ùÏ≤¥ ÏÉÅÏÑ∏ Î∂ÑÏÑù Î©îÏù∏ Ìï®Ïàò"""
        
        # Ïã†Î¢∞ÎèÑÍ∞Ä ÎÇÆÏúºÎ©¥ Î∂ÑÏÑùÌïòÏßÄ ÏïäÏùå
        if confidence < self.analysis_settings['confidence_threshold']:
            return None
        
        # Ïö∞ÏÑ†ÏàúÏúÑÍ∞Ä ÎÇÆÏùÄ Í∞ùÏ≤¥Îäî Í±¥ÎÑàÎõ∞Í∏∞
        priority = self.analysis_priority.get(object_class, 0)
        if priority < 5:  # ÏûÑÍ≥ÑÍ∞í
            return None
        
        # Ï∫êÏãú ÌôïÏù∏
        cache_key = f"{object_class}_{int(time.time() // 60)}"  # 1Î∂Ñ Îã®ÏúÑ Ï∫êÏãú
        if cache_key in self.analysis_cache:
            return self.analysis_cache[cache_key]
        
        # Í∞ùÏ≤¥ ÏòÅÏó≠ ÌÅ¨Î°≠
        crop = self.get_object_crop(frame, box)
        if crop is None or crop.size == 0:
            return None
        
        # Ïù¥ÎØ∏ÏßÄ Ïù∏ÏΩîÎî©
        image_base64 = self.encode_image_to_base64(crop)
        if not image_base64:
            return None
          # ÏÇ¨Ïö© Í∞ÄÎä•Ìïú APIÎ°ú Î∂ÑÏÑù ÏãúÎèÑ (Ïö∞ÏÑ†ÏàúÏúÑ Ïàú)
        analysis_result = None
        
        # GitHub Copilot ÏµúÏö∞ÏÑ† (Î°úÏª¨ Ï≤òÎ¶¨, Îπ†Î¶Ñ)
        if self.api_providers['github_copilot']['enabled']:
            analysis_result = self.analyze_with_github_copilot(image_base64, object_class)
        
        # GitHub Copilot Ïã§Ìå® Ïãú OpenAI
        if not analysis_result and self.api_providers['openai']['enabled']:
            analysis_result = self.analyze_with_openai(image_base64, object_class)
        
        # OpenAI Ïã§Ìå® Ïãú Anthropic
        if not analysis_result and self.api_providers['anthropic']['enabled']:
            analysis_result = self.analyze_with_anthropic(image_base64, object_class)
        
        # Anthropic Ïã§Ìå® Ïãú Google
        if not analysis_result and self.api_providers['google']['enabled']:
            analysis_result = self.analyze_with_google(image_base64, object_class)
        
        # Í≤∞Í≥º Ï∫êÏã±
        if analysis_result:
            self.analysis_cache[cache_key] = analysis_result
            print(f"üîç {object_class} ÏÉÅÏÑ∏ Î∂ÑÏÑù ÏôÑÎ£å: {analysis_result.get('brand', 'Unknown')} {analysis_result.get('model', 'Unknown')}")
        
        return analysis_result
    
    def get_detailed_object_name(self, analysis: Dict, original_class: str) -> str:
        """Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Î∞îÌÉïÏúºÎ°ú ÏÉÅÏÑ∏Ìïú Í∞ùÏ≤¥Î™Ö ÏÉùÏÑ±"""
        if not analysis:
            return original_class
        
        try:
            parts = []
            
            # Î∏åÎûúÎìú Ï∂îÍ∞Ä
            if analysis.get('brand') and analysis['brand'] != 'Unknown':
                parts.append(analysis['brand'])
            
            # Î™®Îç∏ Ï∂îÍ∞Ä
            if analysis.get('model') and analysis['model'] != 'Unknown':
                parts.append(analysis['model'])
            
            # ÌÉÄÏûÖ Ï∂îÍ∞Ä (Î∏åÎûúÎìú/Î™®Îç∏Ïù¥ ÏóÜÎäî Í≤ΩÏö∞)
            if not parts and analysis.get('type'):
                parts.append(analysis['type'])
            
            # ÏÉâÏÉÅ Ï∂îÍ∞Ä (ÏÑ†ÌÉùÏ†Å)
            if analysis.get('color') and len(parts) < 2:
                parts.append(analysis['color'])
            
            if parts:
                detailed_name = ' '.join(parts)
                confidence = analysis.get('confidence', 0)
                
                # Ïã†Î¢∞ÎèÑÏóê Îî∞Îùº ÌëúÏãú Î∞©Ïãù Ï°∞Ï†ï
                if confidence > 0.8:
                    return f"{detailed_name}"
                elif confidence > 0.6:
                    return f"{detailed_name} (?)"
                else:
                    return f"{original_class} ({detailed_name}?)"
            
        except Exception as e:
            print(f"‚ö†Ô∏è ÏÉÅÏÑ∏Î™Ö ÏÉùÏÑ± Ïã§Ìå®: {e}")
        
        return original_class
    
    def clear_cache(self):
        """Ï∫êÏãú Ï†ïÎ¶¨"""
        current_time = time.time()
        expired_keys = []
        
        for key, data in self.analysis_cache.items():
            if 'timestamp' in data:
                if current_time - data['timestamp'] > self.cache_expire_time:
                    expired_keys.append(key)
        
        for key in expired_keys:
            del self.analysis_cache[key]

# ÏÑ§Ï†ï ÌååÏùº ÏÉùÏÑ± Ìï®Ïàò
def create_api_config_template():
    """API ÌÇ§ ÏÑ§Ï†ï ÌÖúÌîåÎ¶ø ÏÉùÏÑ±"""
    config_content = """# AI Í∞ùÏ≤¥ Î∂ÑÏÑùÍ∏∞ API ÏÑ§Ï†ï
# Ïù¥ ÌååÏùºÏùÑ .envÎ°ú Ï†ÄÏû•ÌïòÍ≥† Ïã§Ï†ú API ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî

# OpenAI API ÌÇ§ (GPT-4 Vision)
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API ÌÇ§ (Claude 3)
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Google API ÌÇ§ (Gemini Pro Vision)
GOOGLE_API_KEY=your_google_api_key_here

# ÏÇ¨Ïö©Î≤ï:
# 1. ÏúÑ API ÌÇ§Îì§ Ï§ë ÌïòÎÇò Ïù¥ÏÉÅÏùÑ Ïã§Ï†ú ÌÇ§Î°ú ÍµêÏ≤¥
# 2. ÌååÏùºÎ™ÖÏùÑ .envÎ°ú Î≥ÄÍ≤Ω
# 3. ÌîÑÎ°úÍ∑∏Îû® Ïã§Ìñâ Ï†ÑÏóê ÌôòÍ≤ΩÎ≥ÄÏàòÎ°ú Î°úÎìú
"""
    
    with open('api_config_template.txt', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print("üìù API ÏÑ§Ï†ï ÌÖúÌîåÎ¶øÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§: api_config_template.txt")

if __name__ == "__main__":
    # ÌÖåÏä§Ìä∏ ÏΩîÎìú
    analyzer = AIObjectAnalyzer()
    create_api_config_template()
    
    print("ü§ñ AI Í∞ùÏ≤¥ Î∂ÑÏÑùÍ∏∞ ÌÖåÏä§Ìä∏ ÏôÑÎ£å")
    print("üí° Ïã§Ï†ú ÏÇ¨Ïö©ÏùÑ ÏúÑÌï¥ÏÑúÎäî API ÌÇ§ ÏÑ§Ï†ïÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.")
